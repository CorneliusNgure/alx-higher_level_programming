=======================
How to Use 1-my_list.py
=======================

Module of MyList class that inherits from the builtin, list

Instantiation
=============

Instatiating MyList with an empty list:

    >>> MyList = __import__('1-my_list').MyList
    >>> my_list = MyList()
    >>> type(my_list)
    <class '1-my_list.MyList'>
    >>> print(my_list)
    []

Instatiating with one object(iterable).

    >>> my_list = MyList([78, 90, 66])
    >>> print(my_list)
    [78, 90, 66]

    >>> my_list = MyList(None)
    Traceback (most recent call last):
    TypeError: 'NoneType' object is not iterable


Instatiation with more than one object will reaise TyeError.

    >>> my_list = MyList([89, 7], [43, 45])
    Traceback (most recent call last):
    TypeError: list expected at most 1 argument, got 2

Usage
=====

Testing various methods and attributes:
append() method:

    >>> my_list = MyList()
    >>> my_list.append(8)
    >>> my_list.append(9)
    >>> my_list.append(10)
    >>> print(my_list)
    [8, 9, 10]

Index replacing:

    >>> my_list[1] = 76
    >>> print(my_list)
    [8, 76, 10]

Testing remove() method:

    >>> my_list.remove(8)
    >>> print(my_list)
    [76, 10]

Testing print_sorted() Method:
=============================

    >>> my_list = MyList()
    >>> print(my_list.print_sorted)
    <bound method MyList.print_sorted of []>

The method takes no arguments - a TypeError will be raised if an argument is provided.

    >>> my_list.print_sorted(1)
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 2 were given

The method prints the list in ascending sorted order.

    >>> my_list.append(10)
    >>> my_list.append(12)
    >>> my_list.append(14)
    >>> my_list.append(13)
    >>> my_list.append(11)
    >>> print(my_list)
    [10, 12, 14, 13, 11]

    >>> my_list.print_sorted()
    [10, 11, 12, 13, 14]

The order of the original list is not altered after a call to the method.

    >>> print(my_list)
    [10, 12, 14, 13, 11]

Lists of strings are sorted lexographically.

    >>> my_list = MyList()
    >>> my_list.append("Cornelius")
    >>> my_list.append("Ngure")
    >>> my_list.append("Nakuru")
    >>> my_list.append("Kenya")
    >>> my_list.append("Senior")
    >>> print(my_list)
    ['Cornelius', 'Ngure', 'Nakuru', 'Kenya', 'Senior']

    >>> my_list.print_sorted()
    ['Cornelius', 'Kenya', 'Nakuru', 'Ngure', 'Senior']

Nothing to sort with empty lists.

    >>> my_list = MyList()
    >>> my_list.print_sorted()
    []
